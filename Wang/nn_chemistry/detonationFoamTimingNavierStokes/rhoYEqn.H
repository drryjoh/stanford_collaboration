tmp<fv::convectionScheme<scalar>> mvConvection
(
    fv::convectionScheme<scalar>::New
    (
        mesh,
        fields,
        rhoPhi,
        mesh.divScheme("div(phi,Yi_h)")
    )
);

{
    clockTime timer;
    scalar time_before_chemistry =  timer.elapsedTime();
    reaction->correct();
    scalar time_after_chemistry =  timer.elapsedTime();
    scalar current_iteration_chemistry_time = time_after_chemistry - time_before_chemistry;
    chemistry_time+=current_iteration_chemistry_time;
    
    Info << "Current iterations chemistry time:                 " << current_iteration_chemistry_time <<endl;

    Qdot = reaction->Qdot();
    volScalarField Yt(0.0*Y[0]);

    forAll(Y, i)
    {
        if (i != inertIndex && composition.active(i))
        {
            volScalarField& Yi = Y[i];

            fvScalarMatrix YiEqn
            (
                fvm::ddt(rho, Yi)
              + mvConvection->fvmDiv(rhoPhi, Yi)
             ==
                reaction->R(Yi)
            );

            YiEqn.relax();
        
            YiEqn.solve(mesh.solver("Yi"));

            Yi.max(0.0);
            Yi.correctBoundaryConditions();
            Yt += Yi;
        }
    }

    Y[inertIndex] = scalar(1) - Yt;
    Y[inertIndex].max(0.0);
}
