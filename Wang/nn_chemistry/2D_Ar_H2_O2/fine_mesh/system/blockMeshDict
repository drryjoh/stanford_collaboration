/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

//Units = meters (SI everywhere), defining box points
vertices
(
    (0.0  0.0 -0.01)
    (0.5  0.0 -0.01)
    (0.5  0.06 -0.01)
    (0.0  0.06 -0.01)
    (0.0  0.0  0.01)
    (0.5  0.0  0.01)
    (0.5  0.06  0.01)
    (0.0  0.06  0.01)
);

//HERE we define our grid resolution by defining a number of points in each direction x, y, z - NOTE: AMR will decrease size by factor of 4 (w/ 2 refinements)
// We are defining a hex cell (i.e., 6-side = box/rectangular prisim)
// Simple grading (111) will not affect the growth rate of the mesh in any given direction
blocks
(
    hex (0 1 2 3 4 5 6 7) (5000 600 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
	// Defining a wall (BC can still be affected later - inflow, temp, etc.)
	inlet 
	{
		type wall; 
		faces
		(
            		(0 4 7 3)
		);
	}

	outlet
	{
		type wall;
		faces
		(
		 	(1 2 5 6)
		);
	}
	// HERE we need to change the seperation vector for periodic BC's to match the box dimension we've created (periodic in y)
	bottom
	{
		type cyclicAMI;
                neighbourPatch top;
                transform translational;
                separationVector (0 0.06 0);
		faces
		(
 		           (0 1 5 4)
		);
	}
	top
	{
		type cyclicAMI;
                neighbourPatch bottom;
                transform translational;
                separationVector (0 -0.06 0);
		faces
		(
          		  (7 6 2 3)
		);
	}
	// Nothing happening here (i.e., empty), no fluxes computed etc.
	frontAndBack
	{
		type empty;
		faces
		(
           		   (4 5 6 7)
      			   (0 3 2 1)
		);
	}

);

mergePatchPairs
(
);

// ************************************************************************* //
